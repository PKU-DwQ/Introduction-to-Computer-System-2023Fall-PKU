#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Arthals 2110306206@stu.pku.edu.cn
# Describe how and why you modified the baseline code.
# ——————————————
# 本地测评参数：
# ncopy length = 967 bytes
# 68/68 pass correctness test
# Average CPE     7.49
# Score   60.0/60.0
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
	# 9路循环展开，平均期望劣于8路，但是在数组范围限制在 1~64 时优于8路循环展开
	# 加权性能分析（可能是错的！），在下式中，每对乘法第一个数代表由于判断带来的暂停气泡周期数，第二个数代表此类余数的个数
	# 小于号左侧为 9 路循环展开的 CPE，右侧为 8 路循环展开的平均 CPE
	# (2*8[余1]+3*14[余0、2]+4*42[余3~9]-3[少一次循环判断减少的周期数])/64 = 3.48 < 1+2.5 = 3.5
	# 平均期望劣于8路：把 -3 删掉，则左式 CPE = 3.53
	iaddq $-9, %rdx
	jl handle_remainder
	# 进行9路展开，一次性将9个数加载到寄存器中，使用不同的寄存器保证流水线满速运行
loop_unrolling_9_way:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	mrmovq 64(%rdi), %rbx

	# 判断这9个读入的数据是否大于0，大于0则将其写入到dst中，同时计数器加1
judge_and_write_num_0:
	# 判断第一个数是否大于0
	andq %r8, %r8
	# 通过将 rmmovq 指令插入在读取并设置条件码的步骤与条件跳转 jle 之间
	# 使得当设置条件码的指令到达 Memory 访存阶段时，jle 刚刚进入 Decode 解码阶段
	# 从而可以立即使用正确的 M_Cnd，避免控制冒险，即在 Decode 解码阶段就可以知道是否需要跳转
	# 避免了预测失败时的2个气泡周期的惩罚
	rmmovq %r8, (%rsi)
	jle judge_and_write_num_1
	iaddq $1, %rax
judge_and_write_num_1:
	andq %r9, %r9
	rmmovq %r9, 8(%rsi)
	jle judge_and_write_num_2
	iaddq $1, %rax
judge_and_write_num_2:
	andq %r10, %r10
	rmmovq %r10, 16(%rsi)
	jle judge_and_write_num_3
	iaddq $1, %rax
judge_and_write_num_3:
	andq %r11, %r11
	rmmovq %r11, 24(%rsi)
	jle judge_and_write_num_4
	iaddq $1, %rax
judge_and_write_num_4:
	andq %r12, %r12
	rmmovq %r12, 32(%rsi)
	jle judge_and_write_num_5
	iaddq $1, %rax
judge_and_write_num_5:
	andq %r13, %r13
	rmmovq %r13, 40(%rsi)
	jle judge_and_write_num_6
	iaddq $1, %rax
judge_and_write_num_6:
	andq %r14, %r14
	rmmovq %r14, 48(%rsi)
	jle judge_and_write_num_7
	iaddq $1, %rax
judge_and_write_num_7:
	andq %rcx, %rcx
	rmmovq %rcx, 56(%rsi)
	jle judge_and_write_num_8
	iaddq $1, %rax
judge_and_write_num_8:
	andq %rbx, %rbx
	rmmovq %rbx, 64(%rsi)
	jle update_expr
	iaddq $1, %rax
update_expr:
	# 更新循环参数
	# rdi, rsi 都可以改，因为本次循环中的数据已经被写入到了 dst 中，且完成了正数判断
	# 所以不会再次使用，只需待循环结束时再去处理余数
	iaddq $72, %rdi
	iaddq $72, %rsi
	iaddq $-9, %rdx
	# 循环结束条件判断
	# 注意此时无法使用之前类似的控制冒险优化技术，因为必须知道 rdx 的新值才能确定是否要继续拷贝
	# 而插入 nop 指令无益于降低 CPE，因为预测失败的情况只有最后才会出现，并导致 2 个气泡周期的惩罚
	# 但是如果使用 nop 指令，每次循环都会多出 1 个时钟周期
	jge loop_unrolling_9_way

handle_remainder:
	# 余数处理，采用三分法优化
	# 加权性能分析：在下式中，每对乘法第一个数代表由于判断带来的暂停气泡周期数，第二个数代表此类余数的个数
	# 小于号左侧为 9 路循环展开的 CPE，右侧为 8 路循环展开的平均 CPE
	# (2*8[余1]+3*14[余0、2]+4*42[余3~9]-3[少一次循环判断减少的周期数])/64 = 3.48 < 1+2.5 = 3.5
	# 平均期望劣于8路：把 -3 删掉，则左式 CPE = 3.53
	# 注意到 64/9 余 1，所以我们优先处理小余数的情况，从而针对性剪枝，优化 CPE
	iaddq $6, %rdx
	# 0~2
	jl handle_remainder_0_to_2

handle_remainder_3_to_8:
	iaddq $-3, %rdx
	jl handle_remainder_3_to_5

	# 开始进入到具体余数的处理，此时已经可以开始使用之前的技术来避免暂停，优化 CPE
	# 正常的过程是：
	# 1.判断设置状态码
	# 2.条件跳转（1个气泡的暂停）
	# 3.加载数据到寄存器
	# 优化后的过程是
	# 1.判断设置状态码
	# 2.加载数据到寄存器
	# 3.条件跳转
	# 同时，可以交替使用“戳气泡”技术来优化数据冒险，即在 mrmovq 和 andq 设置条件码之间插入一条指令（jle）
	# 使得当 mrmovq 处于访存 M 阶段时，andq 进入译码 D 阶段
	# 此时即可以使用转发技术来避免加载/使用冒险，从而避免暂停/气泡，优化 CPE
handle_remainder_6_to_8:
	iaddq $-1, %rdx
	mrmovq 40(%rdi), %rbx
	jl handle_remainder_6
	mrmovq 48(%rdi), %rbx
	je handle_remainder_7
	mrmovq 56(%rdi), %rbx
	jg handle_remainder_8

handle_remainder_3_to_5:
	iaddq $2, %rdx
	mrmovq 16(%rdi), %rbx
	jl handle_remainder_3
	mrmovq 24(%rdi), %rbx
	je handle_remainder_4
	mrmovq 32(%rdi), %rbx
	jg handle_remainder_5

handle_remainder_0_to_2:
	iaddq $2, %rdx
	mrmovq (%rdi), %rbx
	je handle_remainder_1
	mrmovq 8(%rdi), %rbx
	jg handle_remainder_2
	ret

handle_remainder_8:
	# 此时已经正确读取数据到 rbx 中，可以开始判断是否大于0
	andq %rbx, %rbx
	rmmovq %rbx, 56(%rsi)
	mrmovq 48(%rdi), %rbx
	jle handle_remainder_7
	iaddq $1, %rax
handle_remainder_7:
	andq %rbx, %rbx
	rmmovq %rbx, 48(%rsi)
	mrmovq 40(%rdi), %rbx
	jle handle_remainder_6
	iaddq $1, %rax
handle_remainder_6:
	andq %rbx, %rbx
	rmmovq %rbx, 40(%rsi)
	mrmovq 32(%rdi), %rbx
	jle handle_remainder_5
	iaddq $1, %rax
handle_remainder_5:
	andq %rbx, %rbx
	rmmovq %rbx, 32(%rsi)
	mrmovq 24(%rdi), %rbx
	jle handle_remainder_4
	iaddq $1, %rax
handle_remainder_4:
	andq %rbx, %rbx
	rmmovq %rbx, 24(%rsi)
	mrmovq 16(%rdi), %rbx
	jle handle_remainder_3
	iaddq $1, %rax
handle_remainder_3:
	andq %rbx, %rbx
	rmmovq %rbx, 16(%rsi)
	mrmovq 8(%rdi), %rbx
	jle handle_remainder_2
	iaddq $1, %rax
handle_remainder_2:
	andq %rbx, %rbx
	rmmovq %rbx, 8(%rsi)
	mrmovq (%rdi), %rbx
	jle handle_remainder_1
	iaddq $1, %rax
handle_remainder_1:
	andq %rbx, %rbx
	rmmovq %rbx, (%rsi)
	jle Done
	iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
